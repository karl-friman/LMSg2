@using Core.ViewModels;
@using Core.Utilities;
@using System.Text;
@using Microsoft.AspNetCore.Html;
@model CourseListViewModel

@{
    ViewData["Title"] = "Index";

    string classContents = "btn btn-outline-primary";
    string activeCourse = "false";

}

<h1>Courses</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>

@foreach (var course in Model.Courses)
{
    if (Model.SelectedCourse is not null)
    {
        if (Model.SelectedCourse == course)
        {
            classContents = "btn btn-outline-warning";
            activeCourse = "0";
        }
    }

    var courseLink = Html.ActionLink(linkText: course.Name, actionName: "Index", controllerName: "Courses",
                                          protocol: null, hostname: null, fragment: null,
                                          routeValues: new { selected = course.Id },
                                          htmlAttributes: new { @class = classContents });

    var descriptionTitle = Html.DisplayNameFor(modelItem => course.Description);
    var description = Html.DisplayFor(modelItem => course.Description);
    var startDateTitle = Html.DisplayNameFor(modelItem => course.StartDate);
    var startDate = Html.DisplayFor(modelItem => course.StartDate);
    var endDateTitle = Html.DisplayNameFor(modelItem => course.EndDate);
    var endDate = Html.DisplayFor(modelItem => course.EndDate);

    var descriptionContent = $"<strong>{descriptionTitle}:</strong> {HtmlBuilder.GetString(description)}";
    var startContent = $"<strong>{startDateTitle}:</strong> {HtmlBuilder.GetString(startDate)}";
    var endContent = $"<strong>{endDateTitle}:</strong> {HtmlBuilder.GetString(endDate)}";

    IHtmlContent moduleLink = null;
    string amountOfActivities;
    var moduleContentList = new List<HtmlBuilder>();

    @if (course.Modules != null)
    {
        foreach (var module in course.Modules)
        {
            @if (module != null)
            {
                moduleLink = Html.ActionLink(linkText: module.Name, actionName: "Index", controllerName: "Module",
                                                  protocol: null, hostname: null, fragment: null,
                                                  routeValues: new { selected = module.Id },
                                                  htmlAttributes: new { @class = classContents });
            }

            var moduleContent = HtmlElement.Create(tag: "div", idContent: $"module_{@module.Id}", classContent: "")
                                .AddChildFluent(tagName: "h3", idContent: "", classContent: "", innerContent: moduleLink);
            @if (module.Activities != null)
            {
                amountOfActivities = module.Activities.Count().ToString();

                @foreach (var activity in module.Activities)
                {
                    if (activity != null)
                    {
                        var activityLink = (Html.ActionLink(linkText: activity.Name, actionName: "Index", controllerName: "Activities",
                                             protocol: null, hostname: null, fragment: null,
                                             routeValues: new { selected = activity.Id },
                                             htmlAttributes: new { @class = "btn btn-outline-info" }));
                        moduleContent.AddChildFluent(tagName: "div", idContent: "", classContent: "", innerContent: activityLink);
                    }
                }
            }
            moduleContentList.Add(moduleContent);
        }
    }


    var navigationLinks = $"<a href=\"/Courses/Edit/{course.Id}\">Edit</a> | " +
                $"<a href=\"/Courses/Details/{course.Id}\">Details</a> | " +
                $"<a href=\"/Courses/Delete/{course.Id}\">Delete</a>";

    var accordionContent = HtmlElement.Create(tag: "p", idContent: "", classContent: "")
                            .AddChildFluent(tagName: "div", idContent: "", classContent: "", innerContent: descriptionContent)
                            .AddChildFluent(tagName: "div", idContent: "", classContent: "", innerContent: startContent)
                            .AddChildFluent(tagName: "div", idContent: "", classContent: "", innerContent: endContent)
                            .AddChildFluent(tagName: "div", idContent: "", classContent: "", innerContent: navigationLinks);

    foreach (var module in moduleContentList)
    {
        accordionContent.AddChildFluent(tagName: "div", idContent: "", classContent: "", innerContent: module.ToString());
    }

    var accordion = HtmlElement.Create(tag: "div", idContent: $"course_{@course.Id}", classContent: "")
                    .AddChildFluent(tagName: "h3", idContent: "", classContent: "", innerContent: courseLink)
                    .AddChildFluent(tagName: "div", idContent: "", classContent: "", innerContent: accordionContent.ToString());

    <span>@Html.Raw(accordion)</span>

    <script>
        $("#course_@course.Id").accordion({
                collapsible: true,
                heightStyle: "content",
                active: @activeCourse,
        });
    </script>
    @if (course.Modules != null)
    {
        foreach (var module in course.Modules)
        {
            @if (module != null)
            {
                <script>
                    $("#module_@module.Id").accordion({
                        collapsible: true,
                        heightStyle: "content",
                        active: false,
                    });
                </script>
            }
        }
    }
}


